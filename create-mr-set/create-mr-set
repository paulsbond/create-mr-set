#!/usr/bin/env python3

import argparse
import Bio.Seq
import Bio.SeqIO
import Bio.SeqRecord
import datetime
import gemmi
import gzip
import models
import os
import pdbtools
import random
import rcsb
import sys
import tasks
import urllib.request
import utils
import uuid
import xml.etree.ElementTree as ET

## ARGUMENTS

def add_required_arguments(parser):
  required = parser.add_argument_group("Required arguments")
  required.add_argument("--pdb-coords", metavar="DIR", required=True, help="Directory containing divided coordinate files in gzipped PDB format (??/pdb????.ent.gz)")
  required.add_argument("--pdb-sfs", metavar="DIR", required=True, help="Directory containing divided reflection data files in gzipped CIF format (??/r????sf.ent.gz)")
  required.add_argument("--pdb-reports", metavar="DIR", required=True, help="Directory containing divided validation reports in gzipped XML format (??/????/????_validation.xml.gz)")
  required.add_argument("--gesamt-archive", metavar="DIR", required=True, help="Directory containing a GESAMT archive to search for structural homologues")

def add_optional_arguments(parser):
  optional = parser.add_argument_group("Optional arguments")
  optional.add_argument("--help", action="help", help="Show this help message and exit")
  optional.add_argument("--jobs", metavar="N", default="auto", help="Number of CPU threads to use (default: auto)")
  optional.add_argument("--model-model-max-seqid", type=int, metavar="[95,90,70,50,40,30]", choices=[95,90,70,50,40,30], default=95, help="Maximum sequence identity between two models (default: 95)")
  optional.add_argument("--model-model-min-rmsd", type=float, metavar="X", default=1.5, help="Minimum RMSD between two models (default: 1.5)")
  optional.add_argument("--model-target-max-rmsd", type=float, metavar="X", default=3.0, help="Maximum RMSD between model and target (default: 3.0)")
  optional.add_argument("--model-target-max-seqid", type=int, metavar="[95,90,70,50,40,30]", choices=[95,90,70,50,40,30], default=95, help="Maximum sequence identity between model and target (default: 95)")
  optional.add_argument("--model-target-min-qscore", type=float, metavar="X", default=0.1, help="Minimum GESAMT Q-score between model and target (default: 0.1)")
  optional.add_argument("--num-models", type=int, metavar="N", default=10, help="Maximum number of models to choose for each unique chain (default: 10)")
  optional.add_argument("--num-structures", type=int, metavar="N", default=2, help="Maximum number of structures to find in each resolution bin (default: 200)") # TODO: Change back to default
  optional.add_argument("--res-bins", type=int, metavar="N", default=2, help="Number of resolution bins (default: 10)") # TODO: Change back to default
  optional.add_argument("--res-max", type=float, metavar="X", default=3.0, help="Maximum resolution (exclusive) (default: 3.5)") # TODO: Change back to default
  optional.add_argument("--res-min", type=float, metavar="X", default=1.0, help="Minimum resolution (inclusive) (default: 1.0)")
  optional.add_argument("--structure-structure-max-seqid", type=int, metavar="[95,90,70,50,40,30]", choices=[95,90,70,50,40,30], default=50, help="Maximum sequence identity used for filtering structures with similar chains (default: 50)")
  optional.add_argument("--validation-clash", type=int, metavar="N", default=40, help="Clashscore percentile threshold (default: 40)")
  optional.add_argument("--validation-rama", type=int, metavar="N", default=40, help="Percentage Ramachandran outliers percentile threshold (default: 40)")
  optional.add_argument("--validation-rfree", type=int, metavar="N", default=50, help="Rfree percentile threshold (default: 50)")
  optional.add_argument("--validation-rota", type=int, metavar="N", default=40, help="Percentage rotamer outliers percentile threshold (default: 40)")
  optional.add_argument("--validation-rsrz", type=int, metavar="N", default=40, help="Percentage RSRZ outliers percentile threshold (default: 40)")

def add_calculated_arguments(args):
  args.res_step = (args.res_max - args.res_min) / args.res_bins
  args.jobs = os.cpu_count() if args.jobs == "auto" else int(args.jobs)
  args.jobs = max(1, min(args.jobs, os.cpu_count()))

def parse_args():
  description = "Creates a new molecular replacement test set."
  parser = argparse.ArgumentParser(description=description, add_help=False)
  add_required_arguments(parser)
  add_optional_arguments(parser)
  args = parser.parse_args()
  for arg in sorted(vars(args)):
    user_arg = "--%s" % arg.replace("_", "-")
    print("%-31s  %s" % (user_arg, getattr(args, arg)))
  print("")
  add_calculated_arguments(args)
  return args

## CHOOSE STRUCTURES

class ResolutionBin:
  def __init__(self, i):
    self.min_res = args.res_min + i * args.res_step
    self.max_res = args.res_min + (i + 1) * args.res_step
    self.structures = []
    self.chosen = []

def assign_resolution_bins(structures):
  bins = [ResolutionBin(i) for i in range(args.res_bins)]
  for structure in structures.values():
    if (structure.resolution < args.res_min or
        structure.resolution >= args.res_max):
      continue
    i = int((structure.resolution - args.res_min) / args.res_step)
    bins[i].structures.append(structure)
  return bins

def gzipped_coords(pdb_id):
  pdb = pdb_id.lower()
  return os.path.join(args.pdb_coords, pdb[1:3], "pdb%s.ent.gz" % pdb)

def gzipped_sfs(pdb_id):
  pdb = pdb_id.lower()
  return os.path.join(args.pdb_sfs, pdb[1:3], "r%ssf.ent.gz" % pdb)

def gzipped_report(pdb_id):
  pdb = pdb_id.lower()
  return os.path.join(args.pdb_reports, pdb[1:3], pdb, "%s_validation.xml.gz" % pdb)

def input_files_exist(structure):
  return all(os.path.exists(path) for path in {
    gzipped_coords(structure.id),
    gzipped_sfs(structure.id),
    gzipped_report(structure.id),
  })

def validation_report_okay(structure):
  attrib_key_dict = {
    "relative-percentile-DCC_Rfree": "validation_clash",
    "relative-percentile-clashscore": "validation_rama",
    "relative-percentile-percent-RSRZ-outliers": "validation_rfree",
    "relative-percentile-percent-rama-outliers": "validation_rota",
    "relative-percentile-percent-rota-outliers": "validation_rsrz",
  }
  path = gzipped_report(structure.id)
  if not os.path.exists(path): return False
  with gzip.open(path) as f:
    content = f.read()
  attribs = ET.fromstring(content).find("Entry").attrib
  for attrib in attrib_key_dict:
    key = attrib_key_dict[attrib]
    if attrib not in attribs: return False
    percentile = float(attribs[attrib])
    threshold = getattr(args, key)
    if percentile < threshold: return False
    setattr(structure, key, percentile)
  return True

def choose_structures(structures):
  utils.print_section_title("Choosing Structures")
  res_bins = assign_resolution_bins(structures)
  chosen_clusters = set()
  cluster_attr = "cluster%d" % args.structure_structure_max_seqid
  res_bins.sort(key=lambda res_bin: len(res_bin.structures))
  for res_bin in res_bins:
    title = "Choosing %.2f-%.2fA structures (%d to choose from)" % (
      res_bin.min_res, res_bin.max_res, len(res_bin.structures))
    progress_bar = utils.ProgressBar(title, args.num_structures)
    random.shuffle(res_bin.structures)
    num_checked = 0
    num_missing_files = 0
    num_too_similar = 0
    num_failed_validation = 0
    for structure in res_bin.structures:
      passed = True
      num_checked += 1
      if not input_files_exist(structure):
        num_missing_files += 1
        passed = False
      clusters = {getattr(c, cluster_attr) for c in structure.chains.values()}
      if any(c in chosen_clusters for c in clusters):
        num_too_similar += 1
        passed = False
      if not validation_report_okay(structure):
        num_failed_validation += 1
        passed = False
      if passed:
        res_bin.chosen.append(models.Structure(structure))
        chosen_clusters.update(clusters)
        progress_bar.increment()
        if len(res_bin.chosen) == args.num_structures:
          break
    progress_bar.finish()
    print("Total number checked:          %6d" % num_checked)
    print("Missing input files:           %6d" % num_missing_files)
    print("Too similar to already chosen: %6d" % num_too_similar)
    print("Failed validation checks:      %6d" % num_failed_validation)
    print("")
  return {s.id: s for r in res_bins for s in r.chosen}

## GET SEQUENCES

def download_sequences(structures):
  print("Downloading sequences ...")
  ids = [s.id for s in structures.values()]
  url = "https://www.rcsb.org/pdb/download/downloadFastaFiles.do"
  url += "?structureIdList=%s" % ",".join(ids)
  url += "&compressionType=uncompressed"
  urllib.request.urlretrieve(url, "sequences.fasta")

def extract_sequences(structures):
  print("Extracting sequences ...")
  for record in Bio.SeqIO.parse("sequences.fasta", "fasta"):
    structure_id = record.id[:4]
    chain_id = record.id[5:6]
    if structure_id in structures:
      structure = structures[structure_id]
      if chain_id in structure.chains:
        chain = structure.chains[chain_id]
        chain.add_metadata("seq", str(record.seq))
        chain.add_metadata("length", len(chain.metadata["seq"]))

def write_sequence(structure, path):
  records = []
  for chain in structure.chains.values():
    record = Bio.SeqRecord.SeqRecord(Bio.Seq.Seq(chain.metadata["seq"]),
      id="%s:%s" % (structure.id, chain.id), description="")
    records.append(record)
  Bio.SeqIO.write(records, path, "fasta")
  return structure

def write_deposited_sequence(key, structure):
  structure = write_sequence(structure, structure.path("deposited.fasta"))
  return key, structure

def remove_duplicate_chains(key, structure):
  seq_copies_dict = {}
  for chain_id, chain in sorted(structure.chains.items()):
    if chain.metadata["seq"] not in seq_copies_dict:
      seq_copies_dict[chain.metadata["seq"]] = 1
    else:
      seq_copies_dict[chain.metadata["seq"]] += 1
      del structure.chains[chain_id]
      chain.remove_directory()
  for chain in structure.chains.values():
    chain.add_metadata("copies", seq_copies_dict[chain.metadata["seq"]])
  return key, structure

def write_unique_sequence(key, structure):
  structure = write_sequence(structure, structure.path("unique.fasta"))
  return key, structure

def get_sequences(structures):
  utils.print_section_title("Getting Full Sequences")
  download_sequences(structures)
  extract_sequences(structures)
  utils.parallel("Writing deposited sequences", write_deposited_sequence, structures, args.jobs)
  utils.parallel("Removing duplicate chains", remove_duplicate_chains, structures, args.jobs)
  utils.parallel("Writing unique sequences", write_unique_sequence, structures, args.jobs)
  print("")

## PREPARE STRUCTURE DATA

def unzip_input_files(key, structure):
  utils.run("gunzip", ["-c", gzipped_coords(structure.id)], stdout=structure.path("deposited.pdb"))
  utils.run("gunzip", ["-c", gzipped_sfs(structure.id)], stdout=structure.path("deposited.cif"))
  structure.add_metadata("semet", utils.is_semet(structure.path("deposited.pdb")))
  return key, structure

def convert_to_mtz(key, structure):
  hklin = structure.path("deposited.cif")
  prefix = structure.path("cif2mtz")
  result = tasks.cif2mtz(hklin, prefix)
  structure.jobs["cif2mtz"] = result
  return key, structure

def convert_amplitudes(key, structure):
  hklin = structure.jobs["cif2mtz"]["hklout"]
  seqin = structure.path("deposited.fasta")
  prefix = structure.path("ctruncate")
  result = tasks.convert_amplitudes(hklin, seqin, prefix)
  structure.jobs["ctruncate"] = result
  return key, structure

def add_freer_flag(key, structure):
  hklin = structure.jobs["ctruncate"]["hklout"]
  prefix = structure.path("freerflag")
  result = tasks.add_freer_flag(hklin, prefix)
  structure.jobs["freerflag"] = result
  return key, structure

def rename_columns(key, structure):
  hklin = structure.jobs["freerflag"]["hklout"]
  colin = ["FreeR_flag"] + structure.jobs["ctruncate"]["colout"]
  colout = ["FREE", "FP", "SIGFP"]
  prefix = structure.path("cad")
  result = tasks.select_and_rename_columns(hklin, colin, colout, prefix)
  structure.jobs["cad"] = result
  if "error" not in result:
    mtz = gemmi.read_mtz_file(result["hklout"])
    structure.add_metadata("spacegroup", mtz.spacegroup.hm)
    structure.add_metadata("resolution", round(mtz.resolution_high(), 2))
    structure.add_metadata("asu_volume", round(mtz.cell.volume / mtz.nsymop))
  return key, structure

def remove_unl_residues(key, structure):
  xyzin = structure.path("deposited.pdb")
  prefix = structure.path("no_unl")
  result = tasks.remove_unl_residues(xyzin, prefix)
  structure.jobs["no_unl"] = result
  return key, structure

def refine_deposited_structure(key, structure):
  hklin = structure.jobs["cad"]["hklout"]
  xyzin = structure.jobs["no_unl"]["xyzout"]
  prefix = structure.path("refmac")
  result = tasks.refine(hklin, xyzin, prefix)
  structure.jobs["refmac"] = result
  if "error" not in result:
    structure.add_metadata("refined_rwork", result["final_rwork"])
    structure.add_metadata("refined_rfree", result["final_rfree"])
  return key, structure

def prepare_structure_data(structures):
  utils.print_section_title("Preparing Structure Data")
  steps = [
    ("Unzipping input files", unzip_input_files),
    ("Converting CIF files to MTZ", convert_to_mtz),
    ("Converting amplitudes", convert_amplitudes),
    ("Adding free-R flags", add_freer_flag),
    ("Renaming columns", rename_columns),
    ("Removing UNL residues", remove_unl_residues),
    ("Refining structures", refine_deposited_structure),
  ]
  for title, func in steps:
    utils.parallel(title, func, structures, args.jobs)
    utils.remove_errors(structures)
  print("")

## FIND HOMOLOGUES

def search_for_homologues(chains):
  progress_bar = utils.ProgressBar("Performing gesamt searches", len(chains))
  for chain in chains.values():
    xyzin = chain.structure.jobs["refmac"]["xyzout"]
    prefix = chain.path("gesamt")
    result = tasks.structural_homologues(xyzin, chain.id, prefix, args.gesamt_archive, args.jobs)
    chain.jobs["gesamt"] = result
    progress_bar.increment()
  progress_bar.finish()

class Hit:
  def __init__(self, line):
    split = line.split()
    self.pdb = split[1]
    self.chain = split[2]
    self.qscore = float(split[3])
    self.rmsd = float(split[4])
    self.seqid = float(split[5])
    self.cluster = rcsb.cluster_number(self.pdb, self.chain, args.model_model_max_seqid)

def filtered_gesamt_hits(chain):
  with open(chain.path("gesamt.txt")) as f:
    for line in f:
      if line[0] == "#": continue
      hit = Hit(line)
      if (hit.qscore > args.model_target_min_qscore and
          hit.rmsd < args.model_target_max_rmsd and
          hit.seqid < (args.model_target_max_seqid / 100.0)):
        yield hit

def superpose_result(hit1, hit2):
  tmp_prefix = "tmp%s" % uuid.uuid4()
  path1 = gzipped_coords(hit1.pdb)
  path2 = gzipped_coords(hit2.pdb)
  result = tasks.superpose(path1, hit1.chain, path2, hit2.chain, tmp_prefix)
  utils.remove_files_starting_with(tmp_prefix)
  return result

def should_choose(hit, chosen_hits):
  if hit.cluster is None: return False
  for chosen_hit in reversed(chosen_hits):
    if hit.cluster == chosen_hit.cluster: return False
  for chosen_hit in reversed(chosen_hits):
    result = superpose_result(hit, chosen_hit)
    if "error" in result: return False
    if result["rmsd"] < args.model_model_min_rmsd: return False
    if result["seqid"] > (args.model_model_max_seqid / 100.0):return False
  return True

def choose_hits(key, chain):
  chosen_hits = []
  for hit in filtered_gesamt_hits(chain):
    if should_choose(hit, chosen_hits):
      chosen_hits.append(hit)
      if len(chosen_hits) == args.num_models:
        break
  for hit in chosen_hits:
    models.Homologue(hit.pdb, hit.chain, chain)
  return key, chain

def find_homologues(chains):
  utils.print_section_title("Finding Homologues to Make MR Models From")
  search_for_homologues(chains)
  utils.parallel("Choosing from gesamt results", choose_hits, chains, args.jobs)

## MR

def superpose_homologue(key, homologue):
  xyzin1 = homologue.chain.structure.jobs["refmac"]["xyzout"]
  chain1 = homologue.chain.id
  xyzin2 = gzipped_coords(homologue.hit_pdb)
  chain2 = homologue.hit_chain
  prefix = homologue.path("gesamt")
  result = tasks.superpose(xyzin1, chain1, xyzin2, chain2, prefix)
  homologue.jobs["gesamt"] = result
  if "error" not in result:
    homologue.add_metadata("gesamt_qscore", result["qscore"])
    homologue.add_metadata("gesamt_rmsd", result["rmsd"])
    homologue.add_metadata("gesamt_length", result["length"])
    homologue.add_metadata("gesamt_seqid", result["seqid"])
  return key, homologue

def uppercase_alignment(key, homologue):
  seqin = homologue.jobs["gesamt"]["seqout"]
  seqout = homologue.path("uppercase.fasta")
  utils.transform_sequences_to_uppercase(seqin, seqout)
  return key, homologue

def trim_model(key, homologue):
  model = gzipped_coords(homologue.hit_pdb)
  chain = homologue.hit_chain
  alignment = homologue.path("uppercase.fasta")
  prefix = homologue.path("sculptor")
  result = tasks.trim_model(model, chain, alignment, prefix)
  homologue.jobs["sculptor"] = result
  return key, homologue

def mr(key, homologue):
  hklin = homologue.chain.structure.jobs["cad"]["hklout"]
  xyzin = homologue.jobs["sculptor"]["xyzout"]
  identity = homologue.jobs["gesamt"]["seqid"]
  prefix = homologue.path("phaser")
  copies = homologue.chain.metadata["copies"]
  atom_counts = pdbtools.count_elements(homologue.chain.structure.path("deposited.pdb"))
  result = tasks.mr(hklin, xyzin, identity, prefix, copies, atom_counts)
  homologue.jobs["phaser"] = result
  if "error" not in result:
    homologue.add_metadata("phaser_llg", result["llg"])
    homologue.add_metadata("phaser_rmsd", result["rmsd"])
  return key, homologue

def refine_placed_model(key, homologue):
  hklin = homologue.chain.structure.jobs["cad"]["hklout"]
  xyzin = homologue.jobs["phaser"]["xyzout"]
  prefix = homologue.path("refmac")
  result = tasks.refine(hklin, xyzin, prefix)
  homologue.jobs["refmac"] = result
  if "error" not in result:
    homologue.add_metadata("final_rfree", result["final_rfree"])
    homologue.add_metadata("final_rwork", result["final_rwork"])
    homologue.add_metadata("initial_rfree", result["initial_rfree"])
    homologue.add_metadata("initial_rwork", result["initial_rwork"])
  return key, homologue

def write_combined_mtz(key, homologue):
  prefix = homologue.path("cmtzjoin")
  result = tasks.combine_mtz(prefix, [
    (homologue.chain.structure.jobs["cad"]["hklout"], "FP,SIGFP", "FP,SIGFP"),
    (homologue.chain.structure.jobs["cad"]["hklout"], "FREE", "FREE"),
    (homologue.chain.structure.jobs["refmac"]["hklout"], "HLACOMB,HLBCOMB,HLCCOMB,HLDCOMB", "reference.HLA,reference.HLB,reference.HLC,reference.HLD"),
    (homologue.jobs["refmac"]["hklout"], "HLACOMB,HLBCOMB,HLCCOMB,HLDCOMB", "model.HLA,model.HLB,model.HLC,model.HLD"),
  ])
  homologue.jobs["cmtzjoin"] = result
  return key, homologue

def compare_phases(key, homologue):
  hklin = homologue.jobs["cmtzjoin"]["hklout"]
  fo = "FP,SIGFP"
  wrk_hl = "model.HLA,model.HLB,model.HLC,model.HLD"
  ref_hl = "reference.HLA,reference.HLB,reference.HLC,reference.HLD"
  prefix = homologue.path("cphasematch")
  result = tasks.compare_phases(hklin, fo, wrk_hl, ref_hl, prefix)
  homologue.jobs["cphasematch"] = result
  if "error" not in result:
    homologue.add_metadata("mean_phase_error", result["mean_phase_error"])
    homologue.add_metadata("f_map_correlation", result["f_map_correlation"])
  return key, homologue

def prepare_and_do_mr(homologues):
  utils.print_section_title("Preparing Models and Performing Molecular Replacement")
  steps = [
    ("Superposing homologues for sequence alignments", superpose_homologue),
    ("Tranform gesamt alignments to uppercase", uppercase_alignment),
    ("Trimming input models with sculptor", trim_model),
    # ("Performing molecular replacement with phaser", mr),
    # ("Refining placed models", refine_placed_model),
    # ("Combining phases into a single MTZ file", write_combined_mtz),
    # ("Comparing phases with cphasematch", compare_phases)
  ]
  for title, func in steps:
    utils.parallel(title, func, homologues, args.jobs)
    utils.remove_errors(homologues)
  print("")

## MAIN

if __name__ == "__main__":
  print("###################")
  print("## Create MR Set ##")
  print("###################")
  print("")
  print("Please cite:")
  print("XXXX")
  print("")
  print("Time: %s\n" % datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

  if "CCP4" not in os.environ:
    sys.exit("Please setup the CCP4 environment")

  import pickle
  args = parse_args()

  # print("Getting a list of structures from the PDB\n")
  # rcsb_structures = rcsb.structures()
  # # structures = choose_structures(rcsb_structures)
  # # if len(structures) < 1: sys.exit("ERROR: No structures chosen")
  # structures = { "1O6A": models.Structure(rcsb_structures["1O6A"]) }
  # get_sequences(structures)
  # prepare_structure_data(structures)

  # with open("structures.pkl", "wb") as f:
  #   pickle.dump(structures, f)
  # with open("structures.pkl", "rb") as f:
  #   structures = pickle.load(f)

  # chains = {c.global_id: c for s in structures.values() for c in s.chains.values()}
  # find_homologues(chains)

  # with open("chains.pkl", "wb") as f:
  #   pickle.dump(chains, f)
  with open("chains.pkl", "rb") as f:
    chains = pickle.load(f)
  homologues = {h.global_id: h for c in chains.values() for h in c.homologues.values()}

  prepare_and_do_mr(homologues)

  print("------------------")
  print("Normal termination")
  print("------------------")
