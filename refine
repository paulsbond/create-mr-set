#!/usr/bin/python3

def remove_symmetry_number():
  shutil.copy(deposited_cif(), no_symm_cif())
  run("sed", ["-i", "/^_symmetry.Int_Tables_number/d", no_symm_cif()])

def join_mtz_files():
  run("cmtzjoin", [
    "-mtzout", joined_mtz(),
    "-mtzin", cad_mtz(),
    "-colin", "FP,SIGFP",
    "-colout", "FP,SIGFP",
    "-mtzin", cad_mtz(),
    "-colin", "FREE",
    "-colout", "FREE",
    "-mtzin", reference_mtz(),
    "-colin", "HLACOMB,HLBCOMB,HLCCOMB,HLDCOMB",
    "-colout", "reference.HLA,reference.HLB,reference.HLC,reference.HLD"
  ])

def mtz_metadata():
  f = clipper.CCP4MTZfile()
  f.open_read(joined_mtz())
  return {
    "resolution": round(f.resolution().limit(), 2),
    "spacegroup": f.spacegroup().symbol_hm(),
    "cell": [
      round(f.cell().a(), 2),
      round(f.cell().b(), 2),
      round(f.cell().c(), 2),
      round(clipper.Util_rad2d(f.cell().alpha()), 1),
      round(clipper.Util_rad2d(f.cell().beta()), 1),
      round(clipper.Util_rad2d(f.cell().gamma()), 1),
    ],
  }

def reference_metadata():
  root = ET.parse(reference_xml()).getroot()
  rworks = list(root.iter("r_factor"))
  rfrees = list(root.iter("r_free"))
  return {
    "reference_rwork": float(rworks[-1].text),
    "reference_rfree": float(rfrees[-1].text),
  }

def is_semet():
  with open(reference_pdb()) as f:
    for line in f:
      if line[:6] == "ATOM  " or line[:6] == "HETATM":
        if line[17:20] == "MET": return False
        if line[17:20] == "MSE": return True
  return False

def write_metadata():
  metadata = {
    "pdb_id": args.id,
    "semet": is_semet()
  }
  metadata.update(mtz_metadata())
  metadata.update(reference_metadata())
  json.dump(metadata, open(metadata_json(), "w"), indent=2, sort_keys=True)

if __name__ == "__main__":
  args = parse_args()
  run("mkdir", ["-p", args.id])
  check_input()
  unzip_input()
  remove_symmetry_number()
  convert_to_mtz()
  standardise_mtz()
  remove_unl_residues()
  refine_reference()
  join_mtz_files()
  write_metadata()
