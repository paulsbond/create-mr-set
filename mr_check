#!/usr/bin/env ccp4-python

import os

def get_failure(pdb, model):
  model_dir = os.path.join(pdb, "models", model)

  gesamt_log = os.path.join(model_dir, "gesamt.log")
  gesamt_seq = os.path.join(model_dir, "gesamt.fasta")
  if not os.path.exists(gesamt_log):
    return "No gesamt.log"
  if not os.path.exists(gesamt_seq):
    return "No gesamt.fasta"

  sculptor_log = os.path.join(model_dir, "sculptor.log")
  sculptor_pdb = os.path.join(model_dir, "sculptor.pdb")
  sculptor_seq = os.path.join(model_dir, "sculptor.fasta")
  if not os.path.exists(sculptor_seq):
    return "No sculptor.fasta"
  if not os.path.exists(sculptor_log):
    return "No sculptor.log"
  if not os.path.exists(sculptor_pdb):
    return "No sculptor.pdb"

  phaser_log = os.path.join(model_dir, "phaser.log")
  phaser_pdb = os.path.join(model_dir, "phaser.1.pdb")
  if not os.path.exists(phaser_log):
    return "No phaser.log"
  with open(phaser_log) as log_file:
    contents = log_file.read()
  if not os.path.exists(phaser_pdb):
    if not "EXIT STATUS:" in contents:
      return "Phaser terminated early"
    if "EXIT STATUS: SUCCESS" in contents:
      return "Phaser finished successfully but with no solution"
    if "INPUT ERROR: No scattering in coordinate file" in contents:
      return "Phaser was given a file with no atoms"
    if "INPUT ERROR: Structure Factors of Models" in contents:
      return "Phaser was given a bad ensemble model"
    return "No phaser.1.pdb"

  refmac_log = os.path.join(model_dir, "refmac.log")
  refmac_mtz = os.path.join(model_dir, "refmac.mtz")
  refmac_pdb = os.path.join(model_dir, "refmac.pdb")
  refmac_xml = os.path.join(model_dir, "refmac.xml")
  if not os.path.exists(refmac_log):
    return "No refmac.log"
  if not os.path.exists(refmac_mtz):
    return "No refmac.mtz"
  if not os.path.exists(refmac_pdb):
    return "No refmac.pdb"
  if not os.path.exists(refmac_xml):
    return "No refmac.xml"
  if not os.path.exists(os.path.join(model_dir, "refmac.pdb")):
    return "REFMAC did not produce a PDB file"

pdbs = [line.strip() for line in open("refine_passed")]
with open("mr_failed", "w") as failed, open("mr_passed", "w") as passed:
  for pdb in pdbs:
    for model in os.listdir(os.path.join(pdb, "models")):
      failure = get_failure(pdb, model)
      if failure is None:
        passed.write("%s %s\n" % (pdb, model))
      else:
        failed.write("%s %s %s\n" % (pdb, model, failure))
