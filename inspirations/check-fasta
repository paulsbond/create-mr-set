#!/usr/bin/env ccp4-python

from Bio import SeqIO

pdbs = ["1ayz","1eav","1ewt","1fys","1gn2","1kib","1krq","1kv9","1m2x","1o6a","1ozg","1pqh","1pr6","1qh9","1roz","1rts","1tdo","1uzv","1v9y","1vjf","1vjn","1vjr","1vjx","1vjz","1vk2","1vk3","1vk4","1vk8","1vk9","1vkb","1vkd","1vkf","1vkh","1vki","1vkm","1vkn","1vku","1vky","1vkz","1vl0","1vl2","1vl5","1vl6","1vl7","1vlc","1vli","1vll","1vlm","1vlo","1vlu","1vm8","1vme","1vmg","1vmi","1vp4","1vp7","1vp8","1vpb","1vpm","1vpy","1vpz","1vqr","1vqs","1vqy","1vqz","1vr0","1vr3","1vr5","1vr8","1vra","1vrb","1wl1","1xep","1y17","1ya8","1yqh","1yt2","1z4p","1z82","1z85","1zkg","1zko","1ztc","1zy9","1zyb","1zyu","2a2m","2a3n","2a6a","2a6b","2a9v","2aam","2afb","2aj6","2aj7","2aji","2ajr","2aml","2anu","2ash","2awa","2b46","2b4k","2b4o","2b8m","2bhz","2bws","2d1t","2d3c","2ess","2etd","2eth","2etj","2ets","2f2u","2f4l","2f4p","2fcl","2fea","2ffj","2fg0","2fg9","2fi1","2fna","2fno","2fqp","2fu8","2fud","2fur","2fzt","2g0t","2gb5","2gfg","2ghr","2ghs","2gjg","2glz","2gm6","2gno","2gnr","2go7","2gpj","2gvh","2gvk","2h1q","2hag","2hcf","2hdo","2hh6","2hhz","2hi0","2hoe","2hq7","2hr2","2hsb","2hti","2huh","2huj","2hx1","2hxb","2hxv","2hyt","2i51","2i5i","2i8d","2i9w","2ia7","2iba","2ich","2ifx","2ig6","2ii1","2iiu","2ijd","2ilb","2inb","2irw","2isb","2it9","2itb","2itc","2ix6","2jg7","2nlv","2nuj","2nwv","2nyh","2o08","2o1q","2o2g","2o2x","2o3l","2o5r","2o62","2o7t","2o8q","2obn","2obp","2oc5","2oc6","2od4","2od5","2od6","2ogi","2oh1","2oh3","2okc","2okf","2ooc","2ooj","2op5","2opk","2opl","2oq7","2ord","2osd","2otm","2ou6","2ouw","2owp","2oyo","2ozg","2ozj","2p10","2p1a","2p4g","2p4o","2p7i","2p8j","2p97","2pbl","2pc1","2pg3","2pg4","2pgc","2pim","2pke","2pn1","2pn2","2pnk","2ppv","2pr7","2prr","2prv","2pv4","2pw4","2pyw","2qrx","2thi","2uum","2vzv","2w39","2w6i","2wh5","2wjf","2wlo","2wqb","2wu6","2x7h","2xgb","2y57","2y7j","2y9n","2yib","2yqh","2zac","2zrl","3a72","3a7n","3aim","3aix","3awx","3b0j","3c32","3cjc","3e2h","3e49","3e76","3e9c","3ebi","3edo","3f1n","3fo3","3ghs","3gor","3gp0","3h9e","3h9r","3hvi","3i2e","3i4b","3io6","3ivu","3jzt","3k01","3k19","3kan","3khu","3kiz","3kzu","3l23","3l5u","3llx","3m4q","3m7a","3mbj","3mcq","3mdo","3mg4","3mu4","3mz2","3nk5","3nqy","3nvs","3nwu","3nyy","3o1h","3obi","3or5","3oz2","3oza","3p94","3pet","3pfq","3pja","3prp","3pst","3pzw","3qb8","3qg0","3qo7","3qy5","3r2x","3rdt","3reb","3roh","3ryh","3s3d","3s3f","3se3","3sqg","3t1p","3t5i","3t7b","3tc8","3to2","3tuj","3ufi","3us5","3v0a","3v5i","3v9e","3v9j","3vbm","3vxe","3wcn","3wgl","3whl","3wk5","3wkq","3wo3","3wof","3wrj","3x29","3zhr","3zk9","4aan","4adw","4ah6","4atb","4b9e","4c5h","4cs2","4d9j","4da1","4db5","4ddi","4dfs","4dq0","4e2e","4e94","4eaj","4ef2","4eub","4ezg","4f6l","4fht","4fon","4fru","4fvs","4fxg","4g0j","4g5s","4gbs","4gcm","4gf0","4gm0","4gnk","4gu5","4gvy","4he8","4hh1","4hpf","4hx3","4hzx","4i1m","4ig4","4j7c","4jbw","4jlo","4jor","4kdv","4kit","4kk2","4kp4","4l3v","4ler","4lnv","4m1m","4mk6","4ml5","4mna","4mru","4mzb","4n2a","4nfd","4o4q","4o8v","4oae","4ogz","4oh6","4oia","4opd","4ouq","4pcv","4q1v","4q34","4q53","4q58","4q6k","4q9a","4qjr","4qni","4qu2","4r0k","4r5j","4rau","4rvo","4rwv","4rzl","4s12","4tsq","4ttz","4tx2","4tya","4u1a","4u9c","4up8","4utb","4w8r","4wji","4wu3","4wz2","4x0v","4xgc","4xj4","4xo4","4xwn","4ydz","4yei","4yi8","4yk3","4yl7","4yod","4yxd","4z07","4zbg","5a0l","5a3y","5a40","5a8c","5a9j","5af6","5aqy","5b27","5b5y","5bpw","5clt","5cw7","5dn9","5do9","5dx5","5e4h","5e9p","5efa","5ejv","5eqv","5ewr","5fbf","5fyp","5hzk","5irl","5isx","5j3u","5j7n","5jio","5kob","5kyy","5l2b","5l46","5l66","5lw9","5m47","5mg5","5mj0","5mra","5mto","5n13","5n6c","5nan","5nbp","5nc5","5nxb","5p8l","5pq1","5sya","5t7m","5tru","5u1g","5ual","5ubg","5uqn","5vug","5vyj","5wgi","5wru","5wt6","5ww6","5x4h","5x7h","5xj0","5yc4","5ydh","5ykd","6bav","6brg","6eho","8a3h"]

for pdb in pdbs:
  full_path = "%s.fasta" % pdb
  full = SeqIO.to_dict(SeqIO.parse(full_path, "fasta"))
  # >1AYZ:A|PDBID|CHAIN|SEQUENCE
  full_chains = [key.split("|")[0].split(":")[1] for key in full.keys()]
  full_chains.sort()
  full_set = set(full_chains)
  if len(full_chains) != len(full_set):
    print(full_path + " contains duplicates")
    print(full_chains)
  full_dict = {}
  for key in full:
    chain = key.split("|")[0].split(":")[1]
    sequence = str(full[key].seq)
    full_dict[chain] = sequence
    if all(code in {"A","C","G","T"} for code in sequence):
      print("%s chain %s might be DNA")
    if all(code in {"A","C","G","U"} for code in sequence):
      print("%s chain %s might be RNA")
    if len(sequence) < 10:
      print("%s chain %s only has %s residues" % (pdb, chain, len(sequence)))

  trimmed_path = "%s-trimmed.fasta" % pdb
  trimmed = SeqIO.to_dict(SeqIO.parse(trimmed_path, "fasta"))
  # >A,B,C
  trimmed_chains = []
  for key in trimmed.keys():
    trimmed_chains.extend(key.split(","))
  trimmed_chains.sort()
  trimmed_set = set(trimmed_chains)
  if len(trimmed_chains) != len(trimmed_set):
    print(trimmed_path + " contains duplicates")
    print(trimmed_chains)
  trimmed_dict = {}
  for key in trimmed:
    for chain in key.split(","):
      trimmed_dict[chain] = str(trimmed[key].seq)

  if full_set != trimmed_set:
    print("%s and %s do not have the same chains" % (full_path, trimmed_path))
    print(full_chains)
    print(trimmed_chains)

  for chain in full_dict:
    full_seq = full_dict[chain]
    trimmed_seq = trimmed_dict[chain]
    difference = len(full_seq) - len(trimmed_seq)
    if difference < 0:
      print("%s chain %s is longer in trimmed than full" % (pdb, chain))
    if difference > 100:
      print("Difference of %s in %s chain %s" % (difference, pdb, chain))
