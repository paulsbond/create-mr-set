#!/usr/bin/env python3

import argparse
import csv
import os
import sys
import urllib.request

def parse_args():
  parser = argparse.ArgumentParser(description=(
    "Chooses random X-ray structures from the PDB. "
    "A filter using PDB blastclust cluster numbers is applied "
    "so that the chosen structures do not contain similar chains. "
    "Structures are also filtered by ensuring the 5 validation sliders "
    "meet threshold percentiles "
    "relative to other X-ray structures of similar resolution."))
  parser.add_argument("validation-report-dir",
    help="Directory containing divided gzipped validation reports")
  parser.add_argument("--max_structures", type=int, metavar="N", default=2000,
    help="Maximum number of structures to find")
  parser.add_argument("--res_min", type=float, metavar="X", default=1.0,
    help="Minimum resolution (default: 1.0)")
  parser.add_argument("--res_max", type=float, metavar="X", default=3.5,
    help="Maximum resolution (default: 3.5)")
  parser.add_argument("--res_bins", type=int, metavar="N", default=5,
    help="Number of resolution bins (default: 5)")
  parser.add_argument("--cluster-level", type=int, metavar="N", choices=[95,90,70,50,40,30], default=40,
    help="Sequence identity used for filtering similar chains (default: 40)")
  parser.add_argument("--rfree", type=int, metavar="N", default=50,
    help="Rfree percentile threshold (default: 50)")
  parser.add_argument("--clashscore", type=int, metavar="N", default=25,
    help="Clashscore (default: 25)")
  parser.add_argument("--rsrz-outliers", type=int, metavar="N", default=25,
    help="Percentage RSRZ outliers percentile threshold (default: 25)")
  parser.add_argument("--rama-outliers", type=int, metavar="N", default=25,
    help="Percentage Ramachandran outliers percentile threshold (default: 25)")
  parser.add_argument("--rota-outliers", type=int, metavar="N", default=25,
    help="Percentage rotamer outliers percentile threshold (default: 25)")
  return parser.parse_args()

class Structure:
  def __init__(self, row):
    self.id = row["structureId"].lower()
    self.resolution = float(row["resolution"])
    self.clusters = set()

  def set_resolution_bin(self, args):
    res_step = (args.res_max - args.res_min) / args.res_bins
    for i in range(args.res_bins):
      res_min = args.res_min + i * res_step
      res_max = args.res_min + (i + 1) * res_step
      yield Resolution_bin(res_min, res_max)

  def passes_validation_filter(self, args):
    xml_path = os.path.join(args.validation_report_dir, self.id[1:3], self.id, "%s_validation.xml.gz" % self.id)
    pass

class Resolution_bin:
  def __init__(self, res_min, res_max):
    self.min = res_min
    self.max = res_max
    self.structures = []

def xray_protein_structures(args):
  cluster_column = "clusterNumber%d" % args.cluster_level
  columns = [
    "experimentalTechnique",
    "resolution",
    cluster_column,
    "entityMacromoleculeType",
  ]
  if not os.path.exists("pdb-chains.csv"):
    print("Downloading RCSB custom report of chains in the PDB")
    url = "https://www.rcsb.org/pdb/rest/customReport.xml?pdbids=*&"
    url += "customReportColumns=%s&" % ",".join(columns)
    url += "format=csv&service=wsfile"
    urllib.request.urlretrieve(url, "pdb-chains.csv")
  structures = {}
  with open("pdb-chains.csv") as f:
    for row in csv.DictReader(f):
      if any(row[column] == "" for column in columns): continue
      if row["experimentalTechnique"] != "X-RAY DIFFRACTION": continue
      if row["entityMacromoleculeType"] != "Polypeptide(L)": continue
      structureId = row["structureId"]
      if structureId not in structures:
        structures[structureId] = Structure(row)
      structures[structureId].clusters.add(row[cluster_column])
  return list(structures.values())

def resolution_bin(args, resolution):


def resolution_bins(args):


if __name__ == "__main__":
  args = parse_args()
  structures = xray_protein_structures(args)
  res_bins = resolution_bins(args)
  for res_bin in res_bins:
    print(res_bin.__dict__)
