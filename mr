#!/usr/bin/python3

from Bio import SeqIO, Seq
import argparse
import gemmi
import os
import shared

def parse_args():
  parser = argparse.ArgumentParser(description=(
    "Uses gesamt to superpose the model chain over the target chain "
    "and write out an alignment, "
    "uses phaser.sculptor to trim the model chain using the alignment "
    "and finally does MR using phaser"
  ))
  parser.add_argument("pdb", help="PDB ID of the target structure")
  parser.add_argument("model", help="Directory name for the model (e.g. A_1xs5A)")
  parser.add_argument("pdbs", help="Directory containing divided PDB files (??/pdb????.ent.gz)")
  args = parser.parse_args()
  args.chain = args.model[0]
  args.model_pdb = args.model[2:6]
  args.model_chain = args.model[6]
  args.dir = os.path.join(args.pdb, "models", args.model)
  return args

def gesamt_fasta(): return os.path.join(args.dir, "gesamt.fasta")
def gesamt_log(): return os.path.join(args.dir, "gesamt.log")
def gesamt_pdb(): return os.path.join(args.dir, "gesamt.pdb")
def joined_mtz(): return os.path.join(args.pdb, "joined.mtz")
def model_gz(): return os.path.join(args.pdbs, args.model_pdb[1:3], "pdb%s.ent.gz" % args.model_pdb)
def phaser_log(): return os.path.join(args.dir, "phaser.log")
def phaser_pdb(): return os.path.join(args.dir, "phaser.1.pdb")
def protein_fasta(): return os.path.join(args.pdb, "protein.fasta")
def reference_pdb(): return os.path.join(args.pdb, "reference.pdb")
def refmac_log(): return os.path.join(args.dir, "refmac.log")
def refmac_mtz(): return os.path.join(args.dir, "refmac.mtz")
def refmac_pdb(): return os.path.join(args.dir, "refmac.pdb")
def refmac_xml(): return os.path.join(args.dir, "refmac.xml")
def sculptor_fasta(): return os.path.join(args.dir, "sculptor.fasta")
def sculptor_log(): return os.path.join(args.dir, "sculptor.log")
def sculptor_pdb(): return os.path.join(args.dir, "sculptor.pdb")
def target_gz(): return os.path.join(args.pdbs, args.pdb[1:3], "pdb%s.ent.gz" % args.pdb)

def gesamt():
  shared.run("gesamt", [
    target_gz(), "-s", "//%s" % args.chain,
    model_gz(), "-s", "//%s" % args.model_chain,
    "-o", gesamt_pdb(),
    "-a", gesamt_fasta(),
  ], stdout=gesamt_log())

def sculptor():
  records = list(SeqIO.parse(gesamt_fasta(), "fasta"))
  records[0].id = "%s%s" % (args.pdb, args.chain)
  records[1].id = "%s%s" % (args.model_pdb, args.model_chain)
  records[0].seq = Seq.Seq(str(records[0].seq).upper())
  records[1].seq = Seq.Seq(str(records[1].seq).upper())
  SeqIO.write(records, sculptor_fasta(), "fasta")
  shared.run("phaser.sculptor", ["--stdin"], [
    "input {",
    "  model {"
    "    file_name = %s" % model_gz(),
    "    selection = chain %s" % args.model_chain,
    "    remove_alternate_conformations = True",
    "  }",
    "  alignment {",
    "    file_name = %s" % sculptor_fasta(),
    "    target_index = 1",
    "  }",
    "}",
    "output {",
    "  folder = %s" % args.dir,
    "  root = 'sculptor'",
    "}",
  ], stdout=sculptor_log())
  output_pdb = os.path.join(args.dir, "sculptor_pdb%s.ent.pdb" % args.model_pdb)
  os.rename(output_pdb, sculptor_pdb())

def n_copies():
  for record in SeqIO.parse(protein_fasta(), "fasta"):
    if record.id[0] == args.chain:
      return len(record.id.split(","))

def atom_counts():
  model = gemmi.read_structure(reference_pdb())[0]
  counts = {}
  for chain in model:
    for residue in chain:
      for atom in residue:
        element = str(atom.element.name)
        if element not in counts:
          counts[element] = 0
        counts[element] += 1
  return counts

def identity():
  log_path = os.path.join(args.dir, "gesamt.log")
  with open(log_path) as log_file:
    for line in log_file:
      if line[:19] == " Sequence Id:     :":
        return float(line[19:])

def phaser():
  keywords = [
    "MODE MR_AUTO",
    "HKLIN %s" % joined_mtz(),
    "ENSEMBLE model PDBFILE %s IDENTITY %s" % (sculptor_pdb(), identity()),
    "SEARCH ENSEMBLE model NUM %d" % n_copies(),
    "ROOT %s" % os.path.join(args.dir, "phaser"),
    "PURGE ROT NUMBER 1",
    "PURGE TRA NUMBER 1",
    "PURGE RNP NUMBER 1",
    "JOBS 1",
  ]
  counts = atom_counts()
  for atom in counts:
    keywords.append("COMPOSITION ATOM %-2s NUMBER %d" % (atom, counts[atom]))
  shared.run("phaser", stdin=keywords, stdout=phaser_log())

def refmac():
  shared.run("refmac5", [
    "HKLIN", joined_mtz(),
    "XYZIN", phaser_pdb(),
    "HKLOUT", refmac_mtz(),
    "XYZOUT", refmac_pdb(),
    "XMLOUT", refmac_xml(),
  ], [
    "NCYCLES 10",
    "END"
  ], stdout=refmac_log())

if __name__ == "__main__":
  args = parse_args()
  gesamt()
  sculptor()
  phaser()
  refmac()
